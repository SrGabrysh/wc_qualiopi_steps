{
  "timestamp": "20250929_113414",
  "datetime": "2025-09-29T11:37:26.662147",
  "plugin_dir": "e:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps",
  "summary": {
    "total": 7,
    "success": 3,
    "failed": 4,
    "success_rate": 42.857142857142854
  },
  "results": {
    "Tests généraux": {
      "success": false,
      "returncode": 2,
      "stdout": "\n  \u001b[30;43;1m WARN \u001b[39;49;22m Your XML configuration validates against a deprecated schema. Migrate your XML configuration using \"--migrate-configuration\"!\n\n  \u001b[44;1m INFO \u001b[49;22m Bootstrap WC Qualiopi Steps tests loaded.\n\n\n   FAIL  Tests\\Unit\\MappingTest\n  ⨯ WCQS_Mapping → it validates mapping configuration                                                                       0.71s  \n  ⨯ WCQS_Mapping → it manages cache correctly                                                                               0.23s  \n  ⨯ WCQS_Mapping → it gets complete mapping with cache                                                                      0.06s  \n  ⨯ WCQS_Mapping → it applies default values to product configuration                                                       0.01s  \n  ⨯ WCQS_Mapping → it migrates legacy gf_form_id to new structure                                                           0.01s  \n  ⨯ WCQS_Mapping → it gets configuration for specific product                                                               0.01s  \n  ⨯ WCQS_Mapping → it gets test URL for product                                                                             0.01s  \n  ⨯ WCQS_Mapping → it checks if product has active test                                                                     0.01s  \n  ⨯ WCQS_Mapping → it searches in mapping data                                                                              0.01s  \n  ⨯ WCQS_Mapping → it gets all products with filtering                                                                      0.05s  \n  ⨯ WCQS_Mapping → it provides mapping statistics                                                                           0.03s  \n  ⨯ WCQS_Mapping → it handles corrupted mapping data gracefully                                                             0.01s  \n  ✓ WCQS_Mapping → it returns null for non-existent product                                                                 0.09s  \n\n   PASS  Tests\\Unit\\CheckoutDecisionTest\n  ✓ CheckoutDecision → it allows checkout when enforcement is disabled                                                      0.16s  \n  ✓ CheckoutDecision → it allows checkout when no active mapping\n  ✓ CheckoutDecision → it allows checkout with valid temporary token\n  ✓ CheckoutDecision → it allows checkout when test is solved in session\n  ✓ CheckoutDecision → it allows checkout when test is validated in usermeta\n  ✓ CheckoutDecision → it prioritizes temporary token over session validation\n  ✓ CheckoutDecision → it prioritizes session over usermeta validation\n  ✓ CheckoutDecision → it handles multiple products correctly                                                               0.01s  \n  ✓ CheckoutDecision → it ignores usermeta validation for anonymous users\n  ✓ CheckoutDecision → it provides helper methods for decision checking\n  ✓ CheckoutDecision → it converts to array for logging\n  ✓ CheckoutDecision → it allows checkout when no product in cart\n  ✓ CheckoutDecision → it blocks checkout when no validation proof exists\n\n   PASS  Tests\\Unit\\ExampleTest\n  ✓ example                                                                                                                 0.01s  \n\n   PASS  Tests\\Unit\\SessionTest\n  ✓ WCQS_Session → it sets and checks solved status                                                                         0.01s  \n  ✓ WCQS_Session → it provides detailed session information\n  ✓ WCQS_Session → it cannot extend nonexistent sessions\n  ✓ WCQS_Session → it handles multiple products independently\n  ✓ WCQS_Session → it can unset solved status\n  ✓ WCQS_Session → it can extend existing sessions                                                                          0.01s  \n  ✓ WCQS_Session → it respects custom TTL                                                                                   2.01s  \n  ✓ WCQS_Session → it cleans up expired sessions                                                                            2.05s  \n  ✓ WCQS_Session → it provides session statistics                                                                           2.01s  \n  ✓ WCQS_Session → it lists all active sessions                                                                             2.09s  \n\n   PASS  Tests\\Unit\\SimpleTest\n  ✓ Simple Tests → it can run basic assertions                                                                              0.01s  \n  ✓ Simple Tests → it can test arrays\n  ✓ Simple Tests → it can test PHP functions\n\n   PASS  Tests\\Unit\\TokenTest\n  ✓ WCQS_Token → it rejects token with wrong user_id                                                                        0.01s  \n  ✓ WCQS_Token → it rejects token with wrong product_id\n  ✓ WCQS_Token → it rejects corrupted tokens\n  ✓ WCQS_Token → it rejects malformed tokens\n  ✓ WCQS_Token → it uses base64url encoding\n  ✓ WCQS_Token → it creates and verifies a valid token\n  ✓ WCQS_Token → it creates token with default parameters\n  ✓ WCQS_Token → it rejects expired tokens\n  ✓ WCQS_Token → it handles key rotation correctly\n  ✓ WCQS_Token → it generates incremental key versions\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it validates mapping configuration                                    Error   \n  Call to undefined method stdClass::get_status()\n\n  at src\\Utils\\WCQS_Mapping.php:201\n    197▕ \t\tif ( $product_id <= 0 ) {\n    198▕ \t\t\t$errors[] = __( 'Product ID is required', 'wc_qualiopi_steps' );\n    199▕ \t\t} else {\n    200▕ \t\t\t$product = wc_get_product( $product_id );\n  ➜ 201▕ \t\t\tif ( ! $product || $product->get_status() !== 'publish' ) {\n    202▕ \t\t\t\t$errors[] = __( 'Product must exist and be published', 'wc_qualiopi_steps' );\n    203▕ \t\t\t}\n    204▕ \t\t}\n    205▕\n\n  1   src\\Utils\\WCQS_Mapping.php:201\n  2   tests\\Unit\\MappingTest.php:204\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it manages cache correctly                                                    \n  Failed asserting that an array has the key 'product_123'\n\n  at tests\\Unit\\MappingTest.php:279\n    275▕ \n    276▕     it('manages cache correctly', function () {\n    277▕         // Premier accès - charge depuis DB\n    278▕         $mapping1 = WCQS_Mapping::get_mapping();\n  ➜ 279▕         expect($mapping1)->toHaveKey('product_123');\n    280▕ \n    281▕         // Modifier l'option directement (simulation changement externe)\n    282▕         $this->setOption('wcqs_testpos_mapping', ['_version' => 2, 'product_999' => []]);\n    283▕\n\n  1   tests\\Unit\\MappingTest.php:279\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets complete mapping with cache                                           \n  Failed asserting that an array has the key '_version'\n\n  at tests\\Unit\\MappingTest.php:46\n     42▕         $mapping2 = WCQS_Mapping::get_mapping(); // Deuxième appel depuis cache\n     43▕ \n     44▕         expect($mapping1)\n     45▕             ->toBeArray()\n  ➜  46▕             ->toHaveKey('_version', 1)\n     47▕             ->toHaveKey('product_123')\n     48▕             ->toHaveKey('product_124');\n     49▕ \n     50▕         expect($mapping2)->toBe($mapping1); // Même référence = cache utilisé\n\n  1   tests\\Unit\\MappingTest.php:46\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it applies default values to product configuration                            \n  Failed asserting that an array has the key 'product_id'\n\n  at tests\\Unit\\MappingTest.php:84\n     80▕ \n     81▕         $config = WCQS_Mapping::get_for_product(100);\n     82▕ \n     83▕         expect($config)\n  ➜  84▕             ->toHaveKey('product_id', 100)\n     85▕             ->toHaveKey('page_id', 200)\n     86▕             ->toHaveKey('form_source', 'learndash') // Défaut\n     87▕             ->toHaveKey('form_ref', '') // Défaut\n     88▕             ->toHaveKey('active', false) // Défaut\n\n  1   tests\\Unit\\MappingTest.php:84\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it migrates legacy gf_form_id to new structure                                \n  Failed asserting that an array has the key 'form_source'\n\n  at tests\\Unit\\MappingTest.php:106\n    102▕ \n    103▕         $config = WCQS_Mapping::get_for_product(200);\n    104▕ \n    105▕         expect($config)\n  ➜ 106▕             ->toHaveKey('form_source', 'gravityforms')\n    107▕             ->toHaveKey('form_ref', '42')\n    108▕             ->not()->toHaveKey('gf_form_id'); // Supprimé après migration\n    109▕     });\n    110▕\n\n  1   tests\\Unit\\MappingTest.php:106\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets configuration for specific product                                    \n  Failed asserting that null is of type array.\n\n  at tests\\Unit\\MappingTest.php:57\n     53▕     it('gets configuration for specific product', function () {\n     54▕         $config = WCQS_Mapping::get_for_product(123);\n     55▕ \n     56▕         expect($config)\n  ➜  57▕             ->toBeArray()\n     58▕             ->toHaveKey('product_id', 123)\n     59▕             ->toHaveKey('page_id', 456)\n     60▕             ->toHaveKey('form_source', 'learndash')\n     61▕             ->toHaveKey('form_ref', '789')\n\n  1   tests\\Unit\\MappingTest.php:57\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets test URL for product                                                  \n  Failed asserting that null is of type string.\n\n  at tests\\Unit\\MappingTest.php:148\n    144▕         }\n    145▕ \n    146▕         $url = WCQS_Mapping::get_test_url(123);\n    147▕         expect($url)\n  ➜ 148▕             ->toBeString()\n    149▕             ->toContain('https://example.com/test-page')\n    150▕             ->toContain('product_id=123');\n    151▕ \n    152▕         // Avec paramètres personnalisés\n\n  1   tests\\Unit\\MappingTest.php:148\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it checks if product has active test                                          \n  Failed asserting that false is true.\n\n  at tests\\Unit\\MappingTest.php:125\n    121▕                 return null;\n    122▕             }\n    123▕         }\n    124▕ \n  ➜ 125▕         expect(WCQS_Mapping::has_active_test(123))->toBeTrue(); // Active + page existe\n    126▕         expect(WCQS_Mapping::has_active_test(124))->toBeFalse(); // Inactif\n    127▕         expect(WCQS_Mapping::has_active_test(125))->toBeFalse(); // Page manquante\n    128▕         expect(WCQS_Mapping::has_active_test(999))->toBeFalse(); // Produit inexistant\n    129▕     });\n\n  1   tests\\Unit\\MappingTest.php:125\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it searches in mapping data                                                   \n  Failed asserting that an array has the key '123'\n\n  at tests\\Unit\\MappingTest.php:264\n    260▕ \n    261▕         $results = WCQS_Mapping::search('WordPress');\n    262▕         expect($results)\n    263▕             ->toBeArray()\n  ➜ 264▕             ->toHaveKey(123); // Formation WordPress trouvée\n    265▕ \n    266▕         $results_php = WCQS_Mapping::search('PHP');\n    267▕         expect($results_php)->toHaveKey(124);\n    268▕\n\n  1   tests\\Unit\\MappingTest.php:264\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets all products with filtering                                           \n  Failed asserting that actual size 0 matches expected size 3.\n\n  at tests\\Unit\\MappingTest.php:167\n    163▕     it('gets all products with filtering', function () {\n    164▕         $all_products = WCQS_Mapping::get_all_products();\n    165▕         expect($all_products)\n    166▕             ->toBeArray()\n  ➜ 167▕             ->toHaveCount(3)\n    168▕             ->toHaveKey(123)\n    169▕             ->toHaveKey(124)\n    170▕             ->toHaveKey(125);\n    171▕\n\n  1   tests\\Unit\\MappingTest.php:167\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it provides mapping statistics                                                \n  Failed asserting that 0 matches expected 3.\n\n  at tests\\Unit\\MappingTest.php:226\n    222▕         $stats = WCQS_Mapping::get_stats();\n    223▕ \n    224▕         expect($stats)\n    225▕             ->toBeArray()\n  ➜ 226▕             ->toHaveKey('total', 3)\n    227▕             ->toHaveKey('active', 2)\n    228▕             ->toHaveKey('inactive', 1)\n    229▕             ->toHaveKey('problematic')\n    230▕             ->toHaveKey('health_score');\n\n  1   tests\\Unit\\MappingTest.php:226\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it handles corrupted mapping data gracefully                                  \n  Failed asserting that an array has the key '_version'\n\n  at tests\\Unit\\MappingTest.php:312\n    308▕ \n    309▕         $mapping = WCQS_Mapping::get_mapping();\n    310▕         expect($mapping)\n    311▕             ->toBeArray()\n  ➜ 312▕             ->toHaveKey('_version', 1); // Fallback appliqué\n    313▕ \n    314▕         // Configuration produit corrompue\n    315▕         $this->setOption('wcqs_testpos_mapping', [\n    316▕             '_version' => 1,\n\n  1   tests\\Unit\\MappingTest.php:312\n\n\n  Tests:    12 failed, 38 passed (169 assertions)\n  Duration: 17.26s\n\n",
      "stderr": "Script pest handling the test event returned with error code 2\n",
      "cmd": "composer test"
    },
    "Tests unitaires uniquement": {
      "success": false,
      "returncode": 2,
      "stdout": "\n  \u001b[30;43;1m WARN \u001b[39;49;22m Your XML configuration validates against a deprecated schema. Migrate your XML configuration using \"--migrate-configuration\"!\n\n  \u001b[44;1m INFO \u001b[49;22m Bootstrap WC Qualiopi Steps tests loaded.\n\n\n   FAIL  Tests\\Unit\\MappingTest\n  ⨯ WCQS_Mapping → it validates mapping configuration                                                                       0.74s  \n  ⨯ WCQS_Mapping → it searches in mapping data                                                                              0.32s  \n  ⨯ WCQS_Mapping → it applies default values to product configuration                                                       0.01s  \n  ⨯ WCQS_Mapping → it migrates legacy gf_form_id to new structure                                                           0.01s  \n  ⨯ WCQS_Mapping → it gets configuration for specific product                                                               0.02s  \n  ⨯ WCQS_Mapping → it checks if product has active test                                                                     0.01s  \n  ⨯ WCQS_Mapping → it gets test URL for product                                                                             0.01s  \n  ⨯ WCQS_Mapping → it handles corrupted mapping data gracefully                                                             0.01s  \n  ⨯ WCQS_Mapping → it provides mapping statistics                                                                           0.04s  \n  ⨯ WCQS_Mapping → it gets all products with filtering                                                                      0.05s  \n  ⨯ WCQS_Mapping → it gets complete mapping with cache                                                                      0.01s  \n  ⨯ WCQS_Mapping → it manages cache correctly                                                                               0.01s  \n  ✓ WCQS_Mapping → it returns null for non-existent product                                                                 0.10s  \n\n   PASS  Tests\\Unit\\CheckoutDecisionTest\n  ✓ CheckoutDecision → it allows checkout when no product in cart                                                           0.14s  \n  ✓ CheckoutDecision → it allows checkout when no active mapping\n  ✓ CheckoutDecision → it allows checkout with valid temporary token\n  ✓ CheckoutDecision → it allows checkout when test is solved in session\n  ✓ CheckoutDecision → it allows checkout when test is validated in usermeta\n  ✓ CheckoutDecision → it blocks checkout when no validation proof exists                                                   0.02s  \n  ✓ CheckoutDecision → it prioritizes temporary token over session validation\n  ✓ CheckoutDecision → it prioritizes session over usermeta validation\n  ✓ CheckoutDecision → it ignores usermeta validation for anonymous users\n  ✓ CheckoutDecision → it provides helper methods for decision checking\n  ✓ CheckoutDecision → it converts to array for logging\n  ✓ CheckoutDecision → it handles multiple products correctly\n  ✓ CheckoutDecision → it allows checkout when enforcement is disabled\n\n   PASS  Tests\\Unit\\ExampleTest\n  ✓ example                                                                                                                 0.01s  \n\n   PASS  Tests\\Unit\\SessionTest\n  ✓ WCQS_Session → it can unset solved status                                                                               0.05s  \n  ✓ WCQS_Session → it provides detailed session information\n  ✓ WCQS_Session → it cannot extend nonexistent sessions\n  ✓ WCQS_Session → it handles multiple products independently\n  ✓ WCQS_Session → it sets and checks solved status\n  ✓ WCQS_Session → it can extend existing sessions                                                                          0.01s  \n  ✓ WCQS_Session → it respects custom TTL                                                                                   2.00s  \n  ✓ WCQS_Session → it provides session statistics                                                                           2.03s  \n  ✓ WCQS_Session → it cleans up expired sessions                                                                            2.01s  \n  ✓ WCQS_Session → it lists all active sessions                                                                             2.08s  \n\n   PASS  Tests\\Unit\\SimpleTest\n  ✓ Simple Tests → it can run basic assertions                                                                              0.01s  \n  ✓ Simple Tests → it can test arrays\n  ✓ Simple Tests → it can test PHP functions\n\n   PASS  Tests\\Unit\\TokenTest\n  ✓ WCQS_Token → it creates and verifies a valid token                                                                      0.01s  \n  ✓ WCQS_Token → it creates token with default parameters\n  ✓ WCQS_Token → it rejects expired tokens\n  ✓ WCQS_Token → it rejects token with wrong user_id\n  ✓ WCQS_Token → it rejects token with wrong product_id\n  ✓ WCQS_Token → it rejects corrupted tokens\n  ✓ WCQS_Token → it rejects malformed tokens\n  ✓ WCQS_Token → it handles key rotation correctly\n  ✓ WCQS_Token → it uses base64url encoding\n  ✓ WCQS_Token → it generates incremental key versions\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it validates mapping configuration                                    Error   \n  Call to undefined method stdClass::get_status()\n\n  at src\\Utils\\WCQS_Mapping.php:201\n    197▕ \t\tif ( $product_id <= 0 ) {\n    198▕ \t\t\t$errors[] = __( 'Product ID is required', 'wc_qualiopi_steps' );\n    199▕ \t\t} else {\n    200▕ \t\t\t$product = wc_get_product( $product_id );\n  ➜ 201▕ \t\t\tif ( ! $product || $product->get_status() !== 'publish' ) {\n    202▕ \t\t\t\t$errors[] = __( 'Product must exist and be published', 'wc_qualiopi_steps' );\n    203▕ \t\t\t}\n    204▕ \t\t}\n    205▕\n\n  1   src\\Utils\\WCQS_Mapping.php:201\n  2   tests\\Unit\\MappingTest.php:204\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it searches in mapping data                                                   \n  Failed asserting that an array has the key '123'\n\n  at tests\\Unit\\MappingTest.php:264\n    260▕ \n    261▕         $results = WCQS_Mapping::search('WordPress');\n    262▕         expect($results)\n    263▕             ->toBeArray()\n  ➜ 264▕             ->toHaveKey(123); // Formation WordPress trouvée\n    265▕ \n    266▕         $results_php = WCQS_Mapping::search('PHP');\n    267▕         expect($results_php)->toHaveKey(124);\n    268▕\n\n  1   tests\\Unit\\MappingTest.php:264\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it applies default values to product configuration                            \n  Failed asserting that an array has the key 'product_id'\n\n  at tests\\Unit\\MappingTest.php:84\n     80▕ \n     81▕         $config = WCQS_Mapping::get_for_product(100);\n     82▕ \n     83▕         expect($config)\n  ➜  84▕             ->toHaveKey('product_id', 100)\n     85▕             ->toHaveKey('page_id', 200)\n     86▕             ->toHaveKey('form_source', 'learndash') // Défaut\n     87▕             ->toHaveKey('form_ref', '') // Défaut\n     88▕             ->toHaveKey('active', false) // Défaut\n\n  1   tests\\Unit\\MappingTest.php:84\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it migrates legacy gf_form_id to new structure                                \n  Failed asserting that an array has the key 'form_source'\n\n  at tests\\Unit\\MappingTest.php:106\n    102▕ \n    103▕         $config = WCQS_Mapping::get_for_product(200);\n    104▕ \n    105▕         expect($config)\n  ➜ 106▕             ->toHaveKey('form_source', 'gravityforms')\n    107▕             ->toHaveKey('form_ref', '42')\n    108▕             ->not()->toHaveKey('gf_form_id'); // Supprimé après migration\n    109▕     });\n    110▕\n\n  1   tests\\Unit\\MappingTest.php:106\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets configuration for specific product                                    \n  Failed asserting that null is of type array.\n\n  at tests\\Unit\\MappingTest.php:57\n     53▕     it('gets configuration for specific product', function () {\n     54▕         $config = WCQS_Mapping::get_for_product(123);\n     55▕ \n     56▕         expect($config)\n  ➜  57▕             ->toBeArray()\n     58▕             ->toHaveKey('product_id', 123)\n     59▕             ->toHaveKey('page_id', 456)\n     60▕             ->toHaveKey('form_source', 'learndash')\n     61▕             ->toHaveKey('form_ref', '789')\n\n  1   tests\\Unit\\MappingTest.php:57\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it checks if product has active test                                          \n  Failed asserting that false is true.\n\n  at tests\\Unit\\MappingTest.php:125\n    121▕                 return null;\n    122▕             }\n    123▕         }\n    124▕ \n  ➜ 125▕         expect(WCQS_Mapping::has_active_test(123))->toBeTrue(); // Active + page existe\n    126▕         expect(WCQS_Mapping::has_active_test(124))->toBeFalse(); // Inactif\n    127▕         expect(WCQS_Mapping::has_active_test(125))->toBeFalse(); // Page manquante\n    128▕         expect(WCQS_Mapping::has_active_test(999))->toBeFalse(); // Produit inexistant\n    129▕     });\n\n  1   tests\\Unit\\MappingTest.php:125\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets test URL for product                                                  \n  Failed asserting that null is of type string.\n\n  at tests\\Unit\\MappingTest.php:148\n    144▕         }\n    145▕ \n    146▕         $url = WCQS_Mapping::get_test_url(123);\n    147▕         expect($url)\n  ➜ 148▕             ->toBeString()\n    149▕             ->toContain('https://example.com/test-page')\n    150▕             ->toContain('product_id=123');\n    151▕ \n    152▕         // Avec paramètres personnalisés\n\n  1   tests\\Unit\\MappingTest.php:148\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it handles corrupted mapping data gracefully                                  \n  Failed asserting that an array has the key '_version'\n\n  at tests\\Unit\\MappingTest.php:312\n    308▕ \n    309▕         $mapping = WCQS_Mapping::get_mapping();\n    310▕         expect($mapping)\n    311▕             ->toBeArray()\n  ➜ 312▕             ->toHaveKey('_version', 1); // Fallback appliqué\n    313▕ \n    314▕         // Configuration produit corrompue\n    315▕         $this->setOption('wcqs_testpos_mapping', [\n    316▕             '_version' => 1,\n\n  1   tests\\Unit\\MappingTest.php:312\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it provides mapping statistics                                                \n  Failed asserting that 0 matches expected 3.\n\n  at tests\\Unit\\MappingTest.php:226\n    222▕         $stats = WCQS_Mapping::get_stats();\n    223▕ \n    224▕         expect($stats)\n    225▕             ->toBeArray()\n  ➜ 226▕             ->toHaveKey('total', 3)\n    227▕             ->toHaveKey('active', 2)\n    228▕             ->toHaveKey('inactive', 1)\n    229▕             ->toHaveKey('problematic')\n    230▕             ->toHaveKey('health_score');\n\n  1   tests\\Unit\\MappingTest.php:226\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets all products with filtering                                           \n  Failed asserting that actual size 0 matches expected size 3.\n\n  at tests\\Unit\\MappingTest.php:167\n    163▕     it('gets all products with filtering', function () {\n    164▕         $all_products = WCQS_Mapping::get_all_products();\n    165▕         expect($all_products)\n    166▕             ->toBeArray()\n  ➜ 167▕             ->toHaveCount(3)\n    168▕             ->toHaveKey(123)\n    169▕             ->toHaveKey(124)\n    170▕             ->toHaveKey(125);\n    171▕\n\n  1   tests\\Unit\\MappingTest.php:167\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it gets complete mapping with cache                                           \n  Failed asserting that an array has the key '_version'\n\n  at tests\\Unit\\MappingTest.php:46\n     42▕         $mapping2 = WCQS_Mapping::get_mapping(); // Deuxième appel depuis cache\n     43▕ \n     44▕         expect($mapping1)\n     45▕             ->toBeArray()\n  ➜  46▕             ->toHaveKey('_version', 1)\n     47▕             ->toHaveKey('product_123')\n     48▕             ->toHaveKey('product_124');\n     49▕ \n     50▕         expect($mapping2)->toBe($mapping1); // Même référence = cache utilisé\n\n  1   tests\\Unit\\MappingTest.php:46\n\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Unit\\MappingTest > `WCQS_Mapping` → it manages cache correctly                                                    \n  Failed asserting that an array has the key 'product_123'\n\n  at tests\\Unit\\MappingTest.php:279\n    275▕ \n    276▕     it('manages cache correctly', function () {\n    277▕         // Premier accès - charge depuis DB\n    278▕         $mapping1 = WCQS_Mapping::get_mapping();\n  ➜ 279▕         expect($mapping1)->toHaveKey('product_123');\n    280▕ \n    281▕         // Modifier l'option directement (simulation changement externe)\n    282▕         $this->setOption('wcqs_testpos_mapping', ['_version' => 2, 'product_999' => []]);\n    283▕\n\n  1   tests\\Unit\\MappingTest.php:279\n\n\n  Tests:    12 failed, 38 passed (169 assertions)\n  Duration: 17.47s\n\n",
      "stderr": "Script pest tests/Unit handling the test:unit event returned with error code 2\n",
      "cmd": "composer test:unit"
    },
    "Tests logique métier": {
      "success": true,
      "returncode": 0,
      "stdout": "PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.8\nConfiguration: E:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\phpunit.xml\n\n\n  \u001b[30;43;1m WARN \u001b[39;49;22m Your XML configuration validates against a deprecated schema. Migrate your XML configuration using \"--migrate-configuration\"!\n\n  \u001b[44;1m INFO \u001b[49;22m Bootstrap WC Qualiopi Steps tests loaded.\n\n\n   PASS  Tests\\Unit\\CheckoutDecisionTest\n  ✓ CheckoutDecision → it allows checkout when enforcement is disabled                                                      0.39s  \n  ✓ CheckoutDecision → it allows checkout when no active mapping\n  ✓ CheckoutDecision → it allows checkout with valid temporary token\n  ✓ CheckoutDecision → it allows checkout when test is solved in session\n  ✓ CheckoutDecision → it allows checkout when test is validated in usermeta\n  ✓ CheckoutDecision → it prioritizes temporary token over session validation\n  ✓ CheckoutDecision → it prioritizes session over usermeta validation\n  ✓ CheckoutDecision → it handles multiple products correctly                                                               0.01s  \n  ✓ CheckoutDecision → it ignores usermeta validation for anonymous users\n  ✓ CheckoutDecision → it provides helper methods for decision checking\n  ✓ CheckoutDecision → it converts to array for logging                                                                     0.04s  \n  ✓ CheckoutDecision → it allows checkout when no product in cart\n  ✓ CheckoutDecision → it blocks checkout when no validation proof exists\n\n  Tests:    13 passed (49 assertions)\n  Duration: 7.48s\n\nTime: 00:02.005, Memory: 12.00 MB\n\nE:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\tests\\Unit\\CheckoutDecisionTest.php\n ✔ `CheckoutDecision` → it allows checkout when enforcement is disabled\n ✔ `CheckoutDecision` → it allows checkout when no product in cart\n ✔ `CheckoutDecision` → it allows checkout when no active mapping\n ✔ `CheckoutDecision` → it allows checkout with valid temporary token\n ✔ `CheckoutDecision` → it allows checkout when test is solved in session\n ✔ `CheckoutDecision` → it allows checkout when test is validated in usermeta\n ✔ `CheckoutDecision` → it blocks checkout when no validation proof exists\n ✔ `CheckoutDecision` → it prioritizes temporary token over session validation\n ✔ `CheckoutDecision` → it prioritizes session over usermeta validation\n ✔ `CheckoutDecision` → it handles multiple products correctly\n ✔ `CheckoutDecision` → it ignores usermeta validation for anonymous users\n ✔ `CheckoutDecision` → it provides helper methods for decision checking\n ✔ `CheckoutDecision` → it converts to array for logging\n\nOK, but there were issues!\nTests: 13, Assertions: 49, PHPUnit Deprecations: 1.\n",
      "stderr": "",
      "cmd": ".\\vendor\\bin\\pest tests\\Unit\\CheckoutDecisionTest.php --testdox"
    },
    "Tests sécurité": {
      "success": true,
      "returncode": 0,
      "stdout": "PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.8\nConfiguration: E:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\phpunit.xml\n\n\n  \u001b[30;43;1m WARN \u001b[39;49;22m Your XML configuration validates against a deprecated schema. Migrate your XML configuration using \"--migrate-configuration\"!\n\n  \u001b[44;1m INFO \u001b[49;22m Bootstrap WC Qualiopi Steps tests loaded.\n\n\n   PASS  Tests\\Unit\\TokenTest\n  ✓ WCQS_Token → it creates and verifies a valid token                                                                      0.44s  \n  ✓ WCQS_Token → it creates token with default parameters\n  ✓ WCQS_Token → it rejects expired tokens                                                                                  0.01s  \n  ✓ WCQS_Token → it rejects token with wrong user_id\n  ✓ WCQS_Token → it rejects token with wrong product_id\n  ✓ WCQS_Token → it rejects corrupted tokens\n  ✓ WCQS_Token → it rejects malformed tokens\n  ✓ WCQS_Token → it handles key rotation correctly                                                                          0.18s  \n  ✓ WCQS_Token → it uses base64url encoding\n  ✓ WCQS_Token → it generates incremental key versions                                                                      0.03s  \n\n  Tests:    10 passed (40 assertions)\n  Duration: 8.00s\n\nTime: 00:02.692, Memory: 12.00 MB\n\nE:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\tests\\Unit\\TokenTest.php\n ✔ `WCQS_Token` → it creates and verifies a valid token\n ✔ `WCQS_Token` → it creates token with default parameters\n ✔ `WCQS_Token` → it rejects expired tokens\n ✔ `WCQS_Token` → it rejects token with wrong user_id\n ✔ `WCQS_Token` → it rejects token with wrong product_id\n ✔ `WCQS_Token` → it rejects corrupted tokens\n ✔ `WCQS_Token` → it rejects malformed tokens\n ✔ `WCQS_Token` → it handles key rotation correctly\n ✔ `WCQS_Token` → it uses base64url encoding\n ✔ `WCQS_Token` → it generates incremental key versions\n\nOK, but there were issues!\nTests: 10, Assertions: 40, PHPUnit Deprecations: 1.\n",
      "stderr": "",
      "cmd": ".\\vendor\\bin\\pest tests\\Unit\\TokenTest.php --testdox"
    },
    "Tests sessions": {
      "success": true,
      "returncode": 0,
      "stdout": "PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.8\nConfiguration: E:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\phpunit.xml\n\n\n  \u001b[30;43;1m WARN \u001b[39;49;22m Your XML configuration validates against a deprecated schema. Migrate your XML configuration using \"--migrate-configuration\"!\n\n  \u001b[44;1m INFO \u001b[49;22m Bootstrap WC Qualiopi Steps tests loaded.\n\n\n   PASS  Tests\\Unit\\SessionTest\n  ✓ WCQS_Session → it sets and checks solved status                                                                         0.51s  \n  ✓ WCQS_Session → it provides detailed session information                                                                 0.05s  \n  ✓ WCQS_Session → it cannot extend nonexistent sessions\n  ✓ WCQS_Session → it handles multiple products independently\n  ✓ WCQS_Session → it can extend existing sessions                                                                          0.01s  \n  ✓ WCQS_Session → it can unset solved status\n  ✓ WCQS_Session → it respects custom TTL                                                                                   2.01s  \n  ✓ WCQS_Session → it cleans up expired sessions                                                                            2.07s  \n  ✓ WCQS_Session → it provides session statistics                                                                           2.02s  \n  ✓ WCQS_Session → it lists all active sessions                                                                             2.14s  \n\n  Tests:    10 passed (51 assertions)\n  Duration: 16.32s\n\nTime: 00:10.698, Memory: 12.00 MB\n\nE:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\tests\\Unit\\SessionTest.php\n ✔ `WCQS_Session` → it sets and checks solved status\n ✔ `WCQS_Session` → it respects custom TTL\n ✔ `WCQS_Session` → it can unset solved status\n ✔ `WCQS_Session` → it provides detailed session information\n ✔ `WCQS_Session` → it cleans up expired sessions\n ✔ `WCQS_Session` → it lists all active sessions\n ✔ `WCQS_Session` → it can extend existing sessions\n ✔ `WCQS_Session` → it cannot extend nonexistent sessions\n ✔ `WCQS_Session` → it provides session statistics\n ✔ `WCQS_Session` → it handles multiple products independently\n\nOK, but there were issues!\nTests: 10, Assertions: 51, PHPUnit Deprecations: 1.\n",
      "stderr": "",
      "cmd": ".\\vendor\\bin\\pest tests\\Unit\\SessionTest.php --testdox"
    },
    "Tests d'intégration": {
      "success": false,
      "returncode": 1,
      "stdout": "PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.8\nConfiguration: E:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\phpunit.xml\n\n\n  \u001b[30;43;1m WARN \u001b[39;49;22m Your XML configuration validates against a deprecated schema. Migrate your XML configuration using \"--migrate-configuration\"!\n\n  \u001b[44;1m INFO \u001b[49;22m Bootstrap WC Qualiopi Steps tests loaded.\n\n\n   FAIL  Tests\\Integration\\TokenSessionIntegrationTest\n  ⨯ Token Session Integration → it handles token expiration with session cleanup                                            2.86s  \n  ✓ Token Session Integration → it validates complete user journey flow                                                     0.13s  \n  ✓ Token Session Integration → it handles concurrent user sessions correctly\n  ✓ Token Session Integration → it supports token rotation with persistent sessions                                         0.07s  \n  ✓ Token Session Integration → it creates token for validated session user\n\n   PASS  Tests\\Integration\\CheckoutFlowTest\n  ✓ Checkout Flow Integration → it allows checkout after successful validation                                              0.12s  \n  ✓ Checkout Flow Integration → it handles token-based validation flow\n  ✓ Checkout Flow Integration → it respects enforcement flag configuration\n  ✓ Checkout Flow Integration → it handles multiple products in cart correctly\n  ✓ Checkout Flow Integration → it integrates checkout decision with cart guard logic\n  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  \n   FAILED  Tests\\Integration\\TokenSessionIntegrationTest > `Token Session Integration` → it handles token expiration with sessi…   \n  Failed asserting that 0 is equal to 1 or is greater than 1.\n\n  at tests\\Integration\\TokenSessionIntegrationTest.php:57\n     53▕         expect(WCQS_Session::is_solved($product_id))->toBeFalse();\n     54▕ \n     55▕         // 5. Cleanup des sessions expirées\n     56▕         $cleaned = WCQS_Session::cleanup_expired();\n  ➜  57▕         expect($cleaned)->toBeGreaterThanOrEqual(1);\n     58▕     });\n     59▕ \n     60▕     it('supports token rotation with persistent sessions', function () {\n     61▕         $user_id = 555;\n\n  1   tests\\Integration\\TokenSessionIntegrationTest.php:57\n\n\n  Tests:    1 failed, 9 passed (69 assertions)\n  Duration: 10.36s\n\nTime: 00:04.989, Memory: 12.00 MB\n\nE:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\tests\\Integration\\CheckoutFlowTest.php\n ✔ `Checkout Flow Integration` → it integrates checkout decision with cart guard logic\n ✔ `Checkout Flow Integration` → it allows checkout after successful validation\n ✔ `Checkout Flow Integration` → it handles token-based validation flow\n ✔ `Checkout Flow Integration` → it respects enforcement flag configuration\n ✔ `Checkout Flow Integration` → it handles multiple products in cart correctly\n\nE:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\tests\\Integration\\TokenSessionIntegrationTest.php\n ✔ `Token Session Integration` → it creates token for validated session user\n ✘ `Token Session Integration` → it handles token expiration with session cleanup\n   │\n   │ Failed asserting that 0 is equal to 1 or is greater than 1.\n   │\n   │ E:\\Mon Drive\\00 - Dev\\01 - Codes\\Sites web\\TB-Formation\\dev_plugin_wc_qualiopi_steps\\Plugins\\wc_qualiopi_steps\\tests\\Integration\\TokenSessionIntegrationTest.php:57\n   │\n ✔ `Token Session Integration` → it supports token rotation with persistent sessions\n ✔ `Token Session Integration` → it validates complete user journey flow\n ✔ `Token Session Integration` → it handles concurrent user sessions correctly\n\nFAILURES!\nTests: 10, Assertions: 69, Failures: 1, PHPUnit Deprecations: 1.\n",
      "stderr": "",
      "cmd": ".\\vendor\\bin\\pest tests\\Integration\\ --testdox"
    },
    "Couverture": {
      "success": false,
      "returncode": 1,
      "stdout": "\n  \u001b[39;41;1m ERROR \u001b[39;49;22m No code coverage driver is available.\n\n",
      "stderr": "Script pest --coverage --min=70 handling the test:coverage event returned with error code 1\n",
      "cmd": "composer test:coverage"
    }
  }
}